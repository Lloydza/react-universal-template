module.exports = {
  parser: '@typescript-eslint/parser',
  env: {
    es6: true,
    browser: true,
    jest: true,
  },
  root: true,
  extends: [
    'airbnb',
    'eslint:recommended',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'prettier',
    'prettier/@typescript-eslint',
  ],
  plugins: [
    '@typescript-eslint',
    'prettier',
    'react',
    'react-hooks',
    'import',
    'import',
    'promise',
    'lodash-fp',
    'jest',
  ],
  env: {
    browser: true,
    node: true,
    jest: true,
    es6: true,
  },
  settings: {
    'import/ignore': ['node_modules', '\\.css$', '\\.(png|jpg|gif)$'],
    'import/resolver': {
      node: {
        paths: ['./src'],
        extensions: ['.js', '.mjs', '.ts', '.tsx'],
      },
    },
  },
  parserOptions: {
    ecmaVersion: 2018,
    ecmaFeatures: {
      jsx: true,
      arrowFunctions: true,
      defaultParams: true,
      destructuring: true,
      forOf: true,
      spread: true,
      templateStrings: true,
    },
    sourceType: 'module',
    project: './tsconfig.json',
    tsconfigRootDir: __dirname,
    extraFileExtensions: ['.mjs'],
  },
  rules: {
    'prettier/prettier': 'error',
    'no-param-reassign': [
      'error',
      {
        props: true,
        ignorePropertyModificationsFor: ['draft', 'ctx'],
      },
    ],
    'no-else-return': ['error', { allowElseIf: true }],
    'object-curly-newline': [
      'error',
      {
        consistent: true,
        multiline: true,
      },
    ],
    'brace-style': ['error', '1tbs', { allowSingleLine: true }],
    camelcase: ['error', { properties: 'never' }],
    eqeqeq: 'error',
    'guard-for-in': 'error',
    'handle-callback-err': ['error', 'error'],
    'key-spacing': ['error', { beforeColon: false, afterColon: true }],
    'new-parens': 'error',
    'no-alert': 'error',
    'no-array-constructor': 'error',
    'no-caller': 'error',
    'no-catch-shadow': 'error',
    'no-cond-assign': 'error',
    'no-constant-condition': 'error',
    'no-delete-var': 'error',
    'no-div-regex': 'error',
    'no-dupe-args': 'error',
    'no-dupe-keys': 'error',
    'no-duplicate-case': 'error',
    'no-empty-character-class': 'error',
    'no-empty': 'error',
    'no-eval': 'error',
    'no-ex-assign': 'error',
    'no-extend-native': 'error',
    'no-extra-bind': 'error',
    'no-extra-boolean-cast': 'error',
    'no-extra-semi': 'error',
    'no-fallthrough': 'error',
    'no-floating-decimal': 'error',
    'no-func-assign': 'error',
    'no-implied-eval': 'error',
    'no-inner-declarations': ['error', 'functions'],
    'no-invalid-regexp': 'error',
    'no-irregular-whitespace': 'error',
    'no-iterator': 'error',
    'no-label-var': 'error',
    'no-lonely-if': 'error',
    'no-mixed-requires': ['error', true],
    'no-mixed-spaces-and-tabs': 'error',
    'no-multi-spaces': 'error',
    'no-multi-str': 'error',
    'no-unsafe-negation': 'error',
    'no-new-object': 'error',
    'no-new-require': 'error',
    'no-new-wrappers': 'error',
    'no-new': 'error',
    'no-obj-calls': 'error',
    'no-octal-escape': 'error',
    'no-octal': 'error',
    'no-path-concat': 1,
    'no-proto': 'error',
    'no-redeclare': 'error',
    'no-regex-spaces': 'error',
    'no-script-url': 'error',
    'no-sequences': 'error',
    'no-shadow-restricted-names': 'error',
    'no-shadow': 'error',
    'func-call-spacing': ['error', 'never'],
    'no-global-assign': 'error',
    'no-sparse-arrays': 'error',
    'no-throw-literal': 'error',
    'no-trailing-spaces': 'error',
    'no-undef-init': 'error',
    'no-unreachable': 'error',
    'no-unused-expressions': 'error',
    'no-unused-vars': ['error', { vars: 'all', args: 'after-used' }],
    'no-void': 'error',
    'no-with': 'error',
    'one-var': ['error', 'never'],
    'operator-assignment': 'error',
    'semi-spacing': ['error', { before: false, after: true }],
    semi: ['error', 'always'],
    'space-before-blocks': ['error', 'always'],
    'space-before-function-paren': ['off', 'always'],
    'space-infix-ops': ['error', { int32Hint: false }],
    'space-return-throw-case': 'off',
    'space-unary-ops': ['error', { words: true, nonwords: false }],
    'spaced-comment': ['warn', 'always'],
    'use-isnan': 'error',
    'valid-typeof': 'error',
    'wrap-iife': 'error',
    'no-labels': 'error',
    quotes: ['error', 'single', { allowTemplateLiterals: true, avoidEscape: true }],
    'jsx-quotes': ['error', 'prefer-double'],
    'prefer-arrow-callback': 'error',
    'prefer-const': ['error', { destructuring: 'all' }],
    'no-var': 'error',
    'prefer-template': 'warn',
    'prefer-spread': 'error',
    'max-len': [
      'error',
      {
        code: 100,
        tabWidth: 2,
        ignoreUrls: true,
        ignoreComments: true,
        ignoreRegExpLiterals: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
      },
    ],
    'no-template-curly-in-string': 'error',
    'generator-star-spacing': ['error', 'both'],
    'object-shorthand': ['error', 'always'],
    'arrow-parens': ['error', 'as-needed'],
    'no-useless-computed-key': 'error',
    'no-extra-label': 'error',
    'no-unneeded-ternary': 'error',
    'object-property-newline': ['error', { allowMultiplePropertiesPerLine: true }],
    'no-return-await': 'error',
    'no-useless-return': 'error',
    'arrow-body-style': 'error',
    'func-name-matching': 'error',
    'quote-props': ['error', 'as-needed'],
    'prefer-numeric-literals': 'error',
    'no-tabs': 'error',
    'no-use-before-define': ['off', { functions: false, classes: false }],
    'no-console': ['error', { allow: ['warn', 'error'] }],
    'no-debugger': 'error',
    'no-await-in-loop': 'error',
    'keyword-spacing': 'error',
    'react/jsx-props-no-spreading': 'off',
    'react/state-in-constructor': 'off',
    'react/display-name': 'error',
    'react/no-deprecated': 'off',
    'react/no-is-mounted': 'error',
    'react/no-direct-mutation-state': 'error',
    'react/no-string-refs': 'error',
    'react/no-unknown-property': 'error',
    'react/prefer-es6-class': 1,
    'react/react-in-jsx-scope': 'error',
    'react/require-render-return': 'error',
    'react/no-render-return-value': 'error',
    'react/no-danger-with-children': 'error',
    'react/jsx-wrap-multilines': 'error',
    'react/jsx-no-comment-textnodes': 'error',
    'react/jsx-no-target-blank': 'error',
    'react/jsx-no-undef': 'error',
    'react/jsx-equals-spacing': ['error', 'never'],
    'react/jsx-curly-spacing': ['error', 'never'],
    'react/jsx-key': 'error',
    'react/jsx-no-duplicate-props': 'error',
    'react/jsx-pascal-case': 'error',
    'react/jsx-uses-react': 'error',
    'react/jsx-uses-vars': 'error',
    'react/jsx-filename-extension': ['error', { extensions: ['.tsx'] }],
    'react/jsx-closing-bracket-location': 'error',
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'warn',
    'import/no-unresolved': ['error', { commonjs: true }],
    'import/named': 'error',
    'import/no-cycle': 'off',
    'import/default': 'error',
    'import/namespace': 'error',
    'import/export': 'error',
    'import/imports-first': 'error',
    'import/no-duplicates': 'error',
    'import/no-deprecated': 'error',
    'import/no-commonjs': 'error',
    'import/no-amd': 'error',
    'import/no-named-as-default-member': 'error',
    'import/extensions': ['error', { js: 'never', png: 'always', css: 'always', less: 'always' }],
    'import/no-extraneous-dependencies': 'off',
    'promise/param-names': 'error',
    'lodash-fp/consistent-name': 'error',
    'lodash-fp/no-argumentless-calls': 'error',
    'lodash-fp/no-chain': 'error',
    'lodash-fp/no-extraneous-function-wrapping': 'error',
    'lodash-fp/no-extraneous-iteratee-args': 'error',
    'lodash-fp/no-partial-of-curried': 'error',
    'lodash-fp/no-submodule-destructuring': 'error',
    'lodash-fp/no-unused-result': 'error',
    'lodash-fp/prefer-compact': 'error',
    'lodash-fp/prefer-flat-map': 'error',
    'lodash-fp/prefer-composition-grouping': 'error',
    'lodash-fp/prefer-get': 'error',
    'lodash-fp/preferred-alias': 'error',
    'lodash-fp/no-single-composition': 'error',
    'lodash-fp/consistent-compose': ['error', 'flow'],
    'jest/no-disabled-tests': 'error',
    'jest/no-focused-tests': 'error',
    'jest/no-identical-title': 'error',
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/explicit-function-return-type': 'error',
    '@typescript-eslint/no-unused-expressions': 'error',
    '@typescript-eslint/consistent-type-assertions': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    '@typescript-eslint/no-var-requires': 'off',
    '@typescript-eslint/no-use-before-define': 'off',
    '@typescript-eslint/require-await': 'off',
    '@typescript-eslint/ban-types': [
      'error',
      {
        types: {
          Function: 'Use arrow function instead',
          Array: 'Use [] instead',
          Object: 'Use {} instead',
          Number: {
            message: 'Use number instead',
            fixWith: 'number',
          },
          String: {
            message: 'Use string instead',
            fixWith: 'string',
          },
          Boolean: {
            message: 'Use boolean instead',
            fixWith: 'boolean',
          },
        },
      },
    ],
    '@typescript-eslint/typedef': [
      'error',
      {
        arrayDestructuring: false,
        objectDestructuring: false,
        memberVariableDeclaration: false,
        propertyDeclaration: false,
        variableDeclaration: false,
        arrowParameter: true,
        parameter: true,
      },
    ],
    '@typescript-eslint/no-inferrable-types': [
      'error',
      {
        ignoreParameters: true,
      },
    ],
  },
  overrides: [
    {
      files: ['src/**/*.js', 'src/**/*.mjs', 'src/test/mocks/*'],
      rules: {
        '@typescript-eslint/no-unused-vars': 'off',
        '@typescript-eslint/explicit-function-return-type': 'off',
        '@typescript-eslint/no-unused-expressions': 'off',
        '@typescript-eslint/consistent-type-assertions': 'off',
        '@typescript-eslint/no-explicit-any': 'off',
        '@typescript-eslint/no-var-requires': 'off',
        '@typescript-eslint/no-use-before-define': 'off',
        '@typescript-eslint/ban-types': 'off',
        '@typescript-eslint/typedef': 'off',
        '@typescript-eslint/no-inferrable-types': 'off',
        '@typescript-eslint/require-await': 'off',
      },
    },
  ],
};
